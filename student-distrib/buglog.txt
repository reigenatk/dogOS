1. Had a bug with keyboard input where if I typed too many keys at once, kernel would just close down. Was confused 
too because I had interrupts disabled during all of my key handling functions. Turns out the solution was to 
add some assembly linkage, by just calling IRET
We do this in interrupt_wrapper.S
This was really strange because 

2. Had issue where RTC would only interrupt once and then never again. I deduced that this was because my 
send_eoi wasn't working, sure enough I was sending the wrong bytes. 

3. uint8_t name[] = "hello"; instead of uint8_t name[5] = "hello"; with the first one working 
and the second one not. This was when writing tests. Not sure what the deal is, but 
the second one wasn't passing the string properly to the tests and hence causing a lot of 
problems.

4. When doing read_data(), I was miscalculating one of my pointer by a 4KB block, which led 
to me not reading in any data when I should've been reading in data. This was fixed
by adding a +1, specifically this was for the value of uint32_t ptr_to_blocks

5. Page fault occuring because in the context switch, I wasn't re-enabling the interrupt flag,
and I was also doing something where I didn't push esp+4 off immediately, so the stack was loading 
a wrong entry point address, and probably failing when it IRET'ed since it was trying to 
access a wrong memory address.

6. When I was trying my execute() syscall out, I didn't know that it was calling 
my read() function for shell() (which was redirecting to terminal_read). 
Then I had a subtle bug in my keyboard when I 
was changing a local variable instead of a pointer 
to the actual struct, which was 
causing the terminal_read() function to hang forever. I debugged this by using a pointer.

7. In writing system call linkage, the right return value was somehow getting lost 
between my execute + halt functions. I stepped through it using a debugger and realized
that it was due to the use of a local variable in my execute function. So I 
opted to replace it with inline assembly instead and it ended up working. 

8. In Scheduler.c line 50, when trying to jump to another task I accidentally 
switched esp and ebp. This was cuasing me to jump to location 0x97, which 
was actually the contents of EFLAGS that was saved onto the stack
before we made the PIT interrupt handler call! This confused me 
a ton but I used gdb to figure it out eventually.

9. In init_terminal() I was memsetting the entire video memory to 0x0
which was a mistake because I forgot that each character is 2 bytes, one 
for terminal color and one for character, so by setting to 0 I was 
actually setting the entire screen to black! Which was a mistake!

10. In parsing the arguments I had a nasty buffer overflow that was 
causing my EBP and EIP to be overwritten, and I was returning to 
weird memory addresses like "616261626" which were obviously
ASCII characters! I fixed this by making the buffer for the command 
larger.

11. Another really obscure bug in my putc '\n' case, where I forgot 
to add an extra equals sign. So it was saying "screen_y = NUM_ROWS - 1"
which was actually a valid C statement, instead of doing ==. So I would 
magically teleport to the bottom of the terminal every time and I was 
really confused on why until I caught this one.